# create_client.yml
# Steve Bonneville <sbonnevi@redhat.com>

- hosts: all

  vars:
    ipa_server: utility.lab.example.com
    ipa_domain: lab.example.com
    ipa_realm: LAB.EXAMPLE.COM
    # this is just a random string that's used as a OTP to register the host
    ipa_otp_password: hippo
    ipa_admin_password: redhat321
    ipa_client_packages: 
      - freeipa-client
      - ipa-admintools

  tasks:

    - name: FreeIPA client packages installed
      package:
        name: "{{ item }}"
        state: latest
      with_items: "{{ ipa_client_packages }}"

    # More complex than I'd like it to be.
    # Looking forward to Ansible 2.3 IPA modules!!!!

# NOT CURRENTLY IDEMPOTENT

    # If DNS is set up properly, should be able to remove --force
    # Delegation doesn't work right in my Vagrant setup right now,
    # probably due to permissions.  May work better in a properly
    # configured Tower.

    - name: Set up host account on FreeIPA server
      command: ipa host-add {{ ansible_fqdn }} --password={{ ipa_otp_password }} --force
      ignore_errors: true
      delegate_to: "{{ ipa_server }}"

    - name: Register system to host account on FreeIPA server
      command: >
        ipa-client-install 
        --server={{ ipa_server }} 
        --domain={{ ipa_domain }}
        --realm={{ ipa_realm }}
        --password={{ ipa_otp_password }}
        --no-ntp
        --mkhomedir
        --unattended
        --force

    # ...hackish, but this'll work...

    - name: Get Kerberos credentials as IPA superuser "admin"
      shell: echo "{{ ipa_admin_password }}" | kinit -f admin
      changed_when: false

    # Still really wanting the Ansible 2.3 IPA modules...
    # Ignoring errors (most likely already registered) for now, but
    #   it probably isn't the right way to handle this; checks which
    #   parse 'ipa hostgroup-show --all' might be better

    - name: Host is registered to development hostgroup
      command: ipa hostgroup-add-member --hosts={{ ansible_fqdn }} development
      when: ansible_fqdn == 'servera.lab.example.com' or ansible_fqdn == 'serverb.lab.example.com'
#      ignore_errors: true

    - name: Host is registered to testing hostgroup
      command: ipa hostgroup-add-member --hosts={{ ansible_fqdn }} testing
      when: ansible_fqdn == 'serverc.lab.example.com' or ansible_fqdn == 'serverd.lab.example.com'
#      ignore_errors: true

    - name: Host is registered to production hostgroup
      command: ipa hostgroup-add-member --hosts={{ ansible_fqdn }} production
      when: ansible_fqdn == 'servere.lab.example.com' or ansible_fqdn == 'serverf.lab.example.com'
#      ignore_errors: true

    # Don't think we actually need "admin" to get certificates

    - name: Check existence of TLS/SSL certificate
      stat:
        path: /etc/pki/tls/certs/{{ ansible_fqdn }}.crt
      register: cert_exists

    # The next task creates valid certs for this host issued by the
    # FreeIPA CA and which certmonger will autorenew on expiration.
    # On tower, they could be copied to /etc/tower/tower.{cert,key}

    - name: Get TLS/SSL certificate from FreeIPA CA
      command: >
        ipa-getcert request -r
        -f /etc/pki/tls/certs/{{ ansible_fqdn }}.crt
        -k /etc/pki/tls/private/{{ ansible_fqdn }}.key
      when: cert_exists is defined


